var FixedQueue = function(s, startingValues) {
  startingValues = (startingValues || [])
  queue = Array.apply( null, startingValues );
  queue.permittedAmount = s;
  queue.trimTail    = FixedQueue.trimTail
  queue.trimHead    = FixedQueue.trimHead
  queue.push        = FixedQueue.push
  queue.unshift     = FixedQueue.unshift
  queue.splice      = FixedQueue.splice
  queue.enqueue     = FixedQueue.enqueue
  queue.dequeue     = FixedQueue.dequeue
  FixedQueue.trimTail.call( queue );
  return queue;
};

FixedQueue.trimTail = function() {
  if (this.length <= this.fixedSize){ return; }
  Array.prototype.splice.call(this,this.permittedAmount,(this.length - this.permittedAmount));
};

FixedQueue.trimHead = function() {
  if (this.length <= this.fixedSize){ return; }
  Array.prototype.splice.call(this,0,(this.length - this.permittedAmount));
};

FixedQueue.registerCallback = function( callbackName, trimMethod ){
  var wrapper = function(){
    var callback = Array.prototype[ callbackName ];
    var result = callback.apply( this, arguments );
    trimMethod.call( this );
    return( result );
  };
  return wrapper;
};

FixedQueue.push    = FixedQueue.registerCallback("push",   FixedQueue.trimHead);
FixedQueue.splice  = FixedQueue.registerCallback("splice", FixedQueue.trimTail);
FixedQueue.unshift = FixedQueue.registerCallback("unshift",FixedQueue.trimTail);
FixedQueue.enqueue = FixedQueue.push
FixedQueue.dequeue = FixedQueue.unshift
exports.FixedQueue = FixedQueue;