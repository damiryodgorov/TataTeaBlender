'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseWindows = exports.parseWindowsProps = exports.COMMAND = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _functional = require('../functional');

var _functional2 = _interopRequireDefault(_functional);

var _utilities = require('../utilities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _F$R = _functional2.default.R,
    compose = _F$R.compose,
    reduce = _F$R.reduce,
    filter = _F$R.filter;
var COMMAND = exports.COMMAND = 'wmic logicaldisk get ' + 'Caption,Description,DeviceID,FileSystem,FreeSpace,Name,Size,VolumeName';

var parseWindowsProps = exports.parseWindowsProps = function parseWindowsProps(acc, _ref) {
  var _ref2 = _slicedToArray(_ref, 8),
      caption = _ref2[0],
      desc = _ref2[1],
      id = _ref2[2],
      filesystem = _ref2[3],
      space = _ref2[4],
      name = _ref2[5],
      size = _ref2[6],
      volumename = _ref2[7];

  acc.devices[name] = acc.devices[name] ? acc.devices[name] : (0, _utilities.emptyDevice)();
  acc.devices[name].id = id;
  acc.devices[name].whole = true;
  acc.devices[name].parent = id;
  acc.devices[name].node = caption;
  acc.devices[name].name = name;
  acc.devices[name].size = parseInt(size);
  acc.devices[name].description = desc;

  var volume = (0, _utilities.emptyVolume)();
  volume.id = id;
  volume.node = id;
  volume.name = volumename || null;
  volume.parent = id;
  volume.mounted = true;
  volume.mountPoint = name;
  volume.fs = filesystem;
  volume.space.total = parseInt(size);
  volume.space.available = parseInt(space);
  volume.space.used = parseInt(size) - parseInt(space);
  acc.devices[name].volumes = [volume];

  return acc;
};

var parseWindows = exports.parseWindows = function parseWindows(parseWindowsProps) {
  return function (userFilter) {
    return compose(function (_ref3) {
      var devices = _ref3.devices;
      return {
        devices: filter(userFilter, devices)
      };
    }, reduce(function (acc, v) {
      return parseWindowsProps(acc, v.split(/\t|\s{2,}/));
    }, { devices: {} }), function (a) {
      return a.splice(1);
    }, filter(function (s) {
      return s.trim();
    }), _utilities.splitEOL);
  };
};