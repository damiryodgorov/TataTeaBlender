'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _functional = require('./functional');

var _functional2 = _interopRequireDefault(_functional);

var _utilities = require('./utilities');

var _linux = require('./linux');

var _linux2 = _interopRequireDefault(_linux);

var _macOS = require('./macOS');

var _macOS2 = _interopRequireDefault(_macOS);

var _windows = require('./windows');

var _windows2 = _interopRequireDefault(_windows);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var identity = _functional2.default.identity,
    ifElse = _functional2.default.ifElse,
    cond = _functional2.default.cond,
    eqeqeq = _functional2.default.eqeqeq,
    tautology = _functional2.default.tautology,
    thrower = _functional2.default.thrower;
var _F$R = _functional2.default.R,
    compose = _F$R.compose,
    composeP = _F$R.composeP;

_child_process2.default.exec = _bluebird2.default.promisify(_child_process2.default.exec, { context: _child_process2.default });

// --------------------------------------
// Common Core - Validation
// --------------------------------------

var validateDev = cond({
  c: function c(dev) {
    return typeof dev === 'function';
  },
  a: identity
}, {
  c: function c(dev) {
    return typeof dev === 'string';
  },
  a: function a(dev) {
    return function (v, k) {
      return (0, _utilities.hasSubstr)(k, dev);
    };
  }
}, {
  c: function c(dev) {
    return dev instanceof RegExp;
  },
  a: function a(dev) {
    return function (v, k) {
      return dev.test(k);
    };
  }
}, {
  c: function c(dev) {
    return typeof dev === 'undefined' || dev === null;
  },
  a: function a(dev) {
    return tautology;
  }
}, {
  c: tautology,
  a: function a(dev) {
    return thrower('fs.filesystem expected first argument \'dev\' to be a function, string, regex or undefined/null. ' + ('Found ' + ((typeof dev === 'undefined' ? 'undefined' : _typeof(dev)) === 'object' ? dev.constructor.name : typeof dev === 'undefined' ? 'undefined' : _typeof(dev)) + ' instead.'), TypeError);
  }
});

var validateCallback = ifElse(function (cb) {
  return typeof cb === 'function';
}, function (cb) {
  return cb;
}, function (cb) {
  return thrower('fs.filesystem expected second argument \'callback\' to be instanceof function. ' + ('Found ' + ((typeof cb === 'undefined' ? 'undefined' : _typeof(cb)) === 'object' ? cb.constructor.name : typeof cb === 'undefined' ? 'undefined' : _typeof(cb)) + ' instead.'), TypeError);
});

var validate = function validate(validateDev, validateCallback) {
  return function (dev, callback) {
    return ifElse(function () {
      return typeof dev === 'function' && !callback;
    }, function () {
      return [tautology, dev];
    }, function () {
      return [validateDev(dev), validateCallback(callback)];
    })();
  };
};

// --------------------------------------
// Common Core - Main & Export Functions
// --------------------------------------

var execute = function execute(cmd, parser) {
  return function (filter, cb) {
    var sync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    return ifElse(function () {
      return sync;
    }, function (cmd) {
      return compose(parser(filter), _utilities.stringify, _child_process2.default.execSync)(cmd);
    }, function (cmd) {
      return composeP(function (v) {
        return cb(null, v);
      }, parser(filter), _utilities.stringify, _child_process2.default.exec)(cmd).catch(cb);
    })(cmd);
  };
};

var filesystem = function filesystem(macOS, linux, windows, validate, platform) {
  return function (dev, callback) {
    return cond({
      c: eqeqeq('darwin'),
      a: function a() {
        return macOS.apply(undefined, _toConsumableArray(validate(dev, callback))).devices;
      }
    }, {
      c: eqeqeq('linux'),
      a: function a() {
        return linux.apply(undefined, _toConsumableArray(validate(dev, callback))).devices;
      }
    }, {
      c: eqeqeq('win32'),
      a: function a() {
        return windows.apply(undefined, _toConsumableArray(validate(dev, callback))).devices;
      }
    }, {
      c: tautology,
      a: function a(os) {
        return thrower('fs.filesystem : Unsupported OS. fs.filesystem does not support ' + (os + ' at the moment'));
      }
    })(platform);
  };
};

var filesystemSync = function filesystemSync(macOS, linux, windows, validateDev, platform) {
  return function (dev) {
    return cond({
      c: eqeqeq('darwin'),
      a: function a() {
        return macOS(validateDev(dev), null, true).devices;
      }
    }, {
      c: eqeqeq('linux'),
      a: function a() {
        return linux(validateDev(dev), null, true).devices;
      }
    }, {
      c: eqeqeq('win32'),
      a: function a() {
        return windows(validateDev(dev), null, true).devices;
      }
    }, {
      c: tautology,
      a: function a(os) {
        return thrower('fs.filesystem : Unsupported OS. fs.filesystem does not support ' + (os + ' at the moment'));
      }
    })(platform);
  };
};

module.exports = filesystem(execute(_macOS2.default.COMMAND, _macOS2.default.parser), execute(_linux2.default.COMMAND, _linux2.default.parser), execute(_windows2.default.COMMAND, _windows2.default.parser), validate(validateDev, validateCallback), _os2.default.platform());

filesystem.sync = filesystemSync(execute(_macOS2.default.COMMAND, _macOS2.default.parser), execute(_linux2.default.COMMAND, _linux2.default.parser), execute(_windows2.default.COMMAND, _windows2.default.parser), validateDev, _os2.default.platform());