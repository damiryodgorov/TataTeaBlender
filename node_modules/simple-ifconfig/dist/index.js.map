{"version":3,"sources":["index.js"],"names":["BASE_16","CHAR_ADVANCE","debug","DEFAULT_ACTIVE_DOWN","DEFAULT_ACTIVE_UP","DEFAULT_HARDWARE_ADDR","DEFAULT_METRIC","DEFAULT_OPTIONS","active","ifconfigPath","internal","verbose","RE_DELIM","RE_FLAGS","addrconf","allmulti","anycast","broadcast","cluif","cos","deprecated","dhcp","duplicate","failed","fixedmtu","grouprt","inactive","loopback","mip","multibcast","multicast","multinet","noarp","nochecksum","nofailover","nolocal","nonud","nortexch","notrailers","noxmit","oactive","offline","pfcopyall","pointopoint","preferred","promisc","pseg","quorumloss","router","running","simplex","smart","standby","temporary","unnumbered","up","varmtu","virtual","xresolv","RE_HARDWARE_ADDR","RE_IFCONFIG_FLAGS","RE_IFCONFIG_IPV4","RE_IFCONFIG_IPV6","RE_INDEX","RE_LINUX_ADDR","RE_LINUX_BCAST","RE_LINUX_MASK","RE_METRIC","RE_MTU","RE_NUMBER","RE_STATUS","RE_UNIX_ADDR","RE_UNIX_BCAST","RE_UNIX_IPV6_ADDR","RE_UNIX_IPV6_PREFIX_LENGTH","RE_UNIX_MASK","RE_UNIX_STATUS_ACTIVE","VERBOSE","_ensureDefaultOptions","networkInfo","Object","getOwnPropertyNames","forEach","optionName","options","_isNullOrUndefined","_ifconfig","args","Promise","resolve","reject","ifconfig","stderr","stdout","on","code","join","err","Error","command","concat","message","chunk","push","value","_parseInterfaceInfo","ifconfigResult","addr","hardwareInterfaces","Map","iface","result","split","line","terms","test","charAt","hardwareAddress","name","set","slice","match","flags","keys","flagName","index","parseInt","metric","mtu","ipv4","term","i","address","netmask","length","ipv6","some","prefixLength","trim","include","sort","a","b","NetworkInfo","_options","settings","Array","isArray"],"mappings":"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","sourcesContent":["import logger from 'debug';\nimport { spawn } from 'child_process';\n\nconst\n\tBASE_16 = 16,\n\tCHAR_ADVANCE = 2,\n\tdebug = logger('simple-ifconfig'),\n\tDEFAULT_ACTIVE_DOWN = 'down',\n\tDEFAULT_ACTIVE_UP = 'up',\n\tDEFAULT_HARDWARE_ADDR = '00:00:00:00:00:00',\n\tDEFAULT_METRIC = 99,\n\tDEFAULT_OPTIONS = {\n\t\tactive : true,\n\t\tifconfigPath : '/sbin/ifconfig',\n\t\tinternal : false,\n\t\tverbose : true\n\t},\n\tRE_DELIM = /\\ |\\:/,\n\t// http://www-01.ibm.com/support/docview.wss?uid=isg3T1019709\n\t// http://docs.oracle.com/cd/E19253-01/816-5166/6mbb1kq31/#INTERFACE%20FLAGS\n\tRE_FLAGS = {\n\t\taddrconf : /(^|[\\ \\t\\,]*)addrconf($|[\\ \\t\\,]*)/i,\n\t\tallmulti : /(^|[\\ \\t\\,]*)allmulti($|[\\ \\t\\,]*)/i,\n\t\tanycast : /(^|[\\ \\t\\,]*)anycast($|[\\ \\t\\,]*)/i,\n\t\tbroadcast : /(^|[\\ \\t\\,]*)broadcast($|[\\ \\t\\,]*)/i,\n\t\tcluif : /(^|[\\ \\t\\,]*)cluif($|[\\ \\t\\,]*)/i,\n\t\tcos : /(^|[\\ \\t\\,]*)cos($|[\\ \\t\\,]*)/i,\n\t\tdebug : /(^|[\\ \\t\\,]*)debug($|[\\ \\t\\,]*)/i,\n\t\tdeprecated : /(^|[\\ \\t\\,]*)deprecated($|[\\ \\t\\,]*)/i,\n\t\tdhcp : /(^|[\\ \\t\\,]*)dhcp($|[\\ \\t\\,]*)/i,\n\t\tduplicate : /(^|[\\ \\t\\,]*)duplicate($|[\\ \\t\\,]*)/i,\n\t\tfailed : /(^|[\\ \\t\\,]*)failed($|[\\ \\t\\,]*)/i,\n\t\tfixedmtu : /(^|[\\ \\t\\,]*)fixedmtu($|[\\ \\t\\,]*)/i,\n\t\tgrouprt : /(^|[\\ \\t\\,]*)grouprt($|[\\ \\t\\,]*)/i,\n\t\tinactive : /(^|[\\ \\t\\,]*)inactive($|[\\ \\t\\,]*)/i,\n\t\tloopback : /(^|[\\ \\t\\,]*)loopback($|[\\ \\t\\,]*)/i,\n\t\tmip : /(^|[\\ \\t\\,]*)mip($|[\\ \\t\\,]*)/i,\n\t\tmultibcast : /(^|[\\ \\t\\,]*)multi_bcast($|[\\ \\t\\,]*)/i,\n\t\tmulticast : /(^|[\\ \\t\\,]*)multicast($|[\\ \\t\\,]*)/i,\n\t\tmultinet : /(^|[\\ \\t\\,]*)multinet($|[\\ \\t\\,]*)/i,\n\t\tnoarp : /(^|[\\ \\t\\,]*)noarp($|[\\ \\t\\,]*)/i,\n\t\tnochecksum : /(^|[\\ \\t\\,]*)nochecksum($|[\\ \\t\\,]*)/i,\n\t\tnofailover : /(^|[\\ \\t\\,]*)nofailover($|[\\ \\t\\,]*)/i,\n\t\tnolocal : /(^|[\\ \\t\\,]*)nolocal($|[\\ \\t\\,]*)/i,\n\t\tnonud : /(^|[\\ \\t\\,]*)nonud($|[\\ \\t\\,]*)/i,\n\t\tnortexch : /(^|[\\ \\t\\,]*)notexch($|[\\ \\t\\,]*)/i,\n\t\tnotrailers : /(^|[\\ \\t\\,]*)notrailers($|[\\ \\t\\,]*)/i,\n\t\tnoxmit : /(^|[\\ \\t\\,]*)noxmit($|[\\ \\t\\,]*)/i,\n\t\toactive : /(^|[\\ \\t\\,]*)oactive($|[\\ \\t\\,]*)/i,\n\t\toffline : /(^|[\\ \\t\\,]*)offline($|[\\ \\t\\,]*)/i,\n\t\tpfcopyall : /(^|[\\ \\t\\,]*)pfcopyall($|[\\ \\t\\,]*)/i,\n\t\tpointopoint : /(^|[\\ \\t\\,]*)pointopoint($|[\\ \\t\\,]*)/i,\n\t\tpreferred : /(^|[\\ \\t\\,]*)preferred($|[\\ \\t\\,]*)/i,\n\t\tprivate : /(^|[\\ \\t\\,]*)private($|[\\ \\t\\,]*)/i,\n\t\tpromisc : /(^|[\\ \\t\\,]*)promisc($|[\\ \\t\\,]*)/i,\n\t\tpseg : /(^|[\\ \\t\\,]*)pseg($|[\\ \\t\\,]*)/i,\n\t\tquorumloss : /(^|[\\ \\t\\,]*)quorumloss($|[\\ \\t\\,]*)/i,\n\t\trouter : /(^|[\\ \\t\\,]*)router($|[\\ \\t\\,]*)/i,\n\t\trunning : /(^|[\\ \\t\\,]*)running($|[\\ \\t\\,]*)/i,\n\t\tsimplex : /(^|[\\ \\t\\,]*)simplex($|[\\ \\t\\,]*)/i,\n\t\tsmart : /(^|[\\ \\t\\,]*)smart($|[\\ \\t\\,]*)/i,\n\t\tstandby : /(^|[\\ \\t\\,]*)standby($|[\\ \\t\\,]*)/i,\n\t\ttemporary : /(^|[\\ \\t\\,]*)temporary($|[\\ \\t\\,]*)/i,\n\t\tunnumbered : /(^|[\\ \\t\\,]*)unnumbered($|[\\ \\t\\,]*)/i,\n\t\tup : /(^|[\\ \\t\\,]*)up($|[\\ \\t\\,]*)/i,\n\t\tvarmtu : /(^|[\\ \\t\\,]*)var\\_mtu($|[\\ \\t\\,]*)/i,\n\t\tvirtual : /(^|[\\ \\t\\,]*)virtual($|[\\ \\t\\,]*)/i,\n\t\txresolv : /(^|[\\ \\t\\,]*)xresolv($|[\\ \\t\\,]*)/i\n\t},\n\tRE_HARDWARE_ADDR = /(ether|hwaddr)\\ +(([0-9a-f]{2}[\\:\\-]{0,1}){6})/i,\n\tRE_IFCONFIG_FLAGS = /<?([a-z\\,\\ \\t\\_]*)\\>?(([\\ \\t]*mtu[\\:\\ \\t]+[0-9]+)|([\\ \\t]*metric[\\:\\ \\t]+[0-9]+)|([\\ \\t]*index[\\:\\ \\t]+[0-9]+))+/i,\n\tRE_IFCONFIG_IPV4 = /^\\s*inet\\s/,\n\tRE_IFCONFIG_IPV6 = /^\\s*inet6\\s/,\n\tRE_INDEX = /index[\\ \\:]+[0-9]+/i,\n\tRE_LINUX_ADDR = /^addr\\:/i,\n\tRE_LINUX_BCAST = /^bcast\\:/i,\n\tRE_LINUX_MASK = /^mask\\:/i,\n\tRE_METRIC = /metric[\\ \\:]+[0-9]+/i,\n\tRE_MTU = /mtu[\\ \\:]+[0-9]+/i,\n\tRE_NUMBER = /^[0-9]{2,}/,\n\tRE_STATUS = /^\\s*(status)|((r|t)x\\ bytes)/i,\n\tRE_UNIX_ADDR = /^inet$/i,\n\tRE_UNIX_BCAST = /^broadcast$/i,\n\tRE_UNIX_IPV6_ADDR = /^inet6$/i,\n\tRE_UNIX_IPV6_PREFIX_LENGTH = /^prefixlen$/i,\n\tRE_UNIX_MASK = /^netmask$/i,\n\tRE_UNIX_STATUS_ACTIVE = /\\ active$/i,\n\tVERBOSE = '-v';\n\nfunction _ensureDefaultOptions (networkInfo) {\n\tObject\n\t\t.getOwnPropertyNames(DEFAULT_OPTIONS)\n\t\t.forEach((optionName) => {\n\t\t\tdebug('examining option %s (%s)', optionName, networkInfo.options[optionName]);\n\t\t\tif (_isNullOrUndefined(networkInfo.options[optionName])) {\n\t\t\t\tdebug(\n\t\t\t\t\t'applying default value for option %s (%o)',\n\t\t\t\t\toptionName,\n\t\t\t\t\tDEFAULT_OPTIONS[optionName]);\n\n\t\t\t\tnetworkInfo.options[optionName] = DEFAULT_OPTIONS[optionName];\n\t\t\t}\n\t\t});\n}\n\nfunction _ifconfig (networkInfo, ...args) {\n\treturn new Promise((resolve, reject) => {\n\t\tlet\n\t\t\tifconfig = spawn(networkInfo.options.ifconfigPath, args),\n\t\t\tstderr = [],\n\t\t\tstdout = [];\n\n\t\t// handle command exit\n\t\tifconfig.on('close', (code) => {\n\t\t\tdebug(\n\t\t\t\t'%s %s command completed (code: %s)',\n\t\t\t\tnetworkInfo.options.ifconfigPath,\n\t\t\t\targs.join(' '),\n\t\t\t\tcode);\n\n\t\t\tif (code) {\n\t\t\t\tlet err = new Error(stderr.join(''));\n\t\t\t\terr.code = code;\n\t\t\t\terr.command = [networkInfo.options.ifconfigPath].concat(args).join(' ');\n\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\treturn resolve(stdout.join(''));\n\t\t});\n\n\t\t// handle errors while attempting to execute command\n\t\tifconfig.on('error', (err) => {\n\t\t\terr.command = [networkInfo.options.ifconfigPath].concat(args).join(' ');\n\t\t\tdebug('%s command failed (error: %s)', err.command, err.message);\n\n\t\t\treturn reject(err);\n\t\t});\n\n\t\t// capture command output\n\t\tifconfig.stdout.on('data', (chunk) => stdout.push(chunk));\n\t\tifconfig.stderr.on('data', (chunk) => stderr.push(chunk));\n\t});\n}\n\nfunction _isNullOrUndefined (value) {\n\treturn value === null || typeof value === 'undefined';\n}\n\nfunction _parseInterfaceInfo (networkInfo, ifconfigResult) {\n\tlet\n\t\taddr,\n\t\thardwareInterfaces = new Map(),\n\t\tiface,\n\t\tresult = [];\n\n\t// break the ifconfig command result into lines and parse them 1 by 1...\n\tifconfigResult.split(/\\r?\\n/).forEach((line) => {\n\t\tlet terms;\n\n\t\t// look for a new interface line\n\t\tif (!/\\s/.test(line.charAt(0))) {\n\t\t\t// split the line on spaces (and optionally a colon)\n\t\t\tline = line.split(/\\:?\\ +/);\n\n\t\t\t// create new iface...\n\t\t\tiface = {\n\t\t\t\tactive : false,\n\t\t\t\thardwareAddress : DEFAULT_HARDWARE_ADDR,\n\t\t\t\tinternal : true\n\t\t\t};\n\n\t\t\t// assign the name using the first term in the line\n\t\t\tiface.name = line[0];\n\n\t\t\t// ensure we have a valid interface\n\t\t\tif (!iface.name) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// track the interface to return after processing\n\t\t\thardwareInterfaces.set(iface.name, iface);\n\n\t\t\t// rebuild the line minus the adapter name and continue processing\n\t\t\tline = line.slice(1).join(' ');\n\t\t}\n\n\t\t// look for hardware address\n\t\tif (RE_HARDWARE_ADDR.test(line)) {\n\t\t\tterms = line.match(RE_HARDWARE_ADDR);\n\t\t\tdebug(\n\t\t\t\t'hardware address of %s found for interface %s',\n\t\t\t\tterms[2],\n\t\t\t\tiface.name);\n\t\t\tiface.hardwareAddress = terms[2];\n\t\t\tiface.internal = false;\n\t\t}\n\n\t\t// look for flag information and process\n\t\tif (RE_IFCONFIG_FLAGS.test(line)) {\n\t\t\tdebug('interface flags found for interface %s (%s)', iface.name, line);\n\t\t\tiface.flags = {};\n\n\t\t\t// map flags to the interface\n\t\t\tObject.keys(RE_FLAGS).forEach((flagName) => {\n\t\t\t\tif (RE_FLAGS[flagName].test(line)) {\n\t\t\t\t\tdebug('flag %s found for interface %s', flagName, iface.name);\n\t\t\t\t\tiface.flags[flagName] = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (RE_INDEX.test(line)) {\n\t\t\t\tterms = line.match(RE_INDEX)[0].split(RE_DELIM);\n\t\t\t\tdebug('index of %d found for interface %s', terms[1], iface.name);\n\t\t\t\tiface.index = parseInt(terms[1], 10);\n\t\t\t}\n\n\t\t\tif (RE_METRIC.test(line)) {\n\t\t\t\tterms = line.match(RE_METRIC)[0].split(RE_DELIM);\n\t\t\t\tdebug('metric of %d found for interface %s', terms[1], iface.name);\n\t\t\t\tiface.metric = parseInt(terms[1], 10);\n\t\t\t}\n\n\t\t\tif (RE_MTU.test(line)) {\n\t\t\t\tterms = line.match(RE_MTU)[0].split(RE_DELIM);\n\t\t\t\tdebug('mtu of %d found for interface %s', terms[1], iface.name);\n\t\t\t\tiface.mtu = parseInt(terms[1], 10);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// look for IPv4 info...\n\t\tif (RE_IFCONFIG_IPV4.test(line)) {\n\t\t\tdebug('IPv4 information found for interface %s (%s)', iface.name, line);\n\n\t\t\taddr = {};\n\t\t\tiface.ipv4 = (iface.ipv4 || []).concat([addr]);\n\t\t\tterms = line.split(/\\s+/);\n\n\t\t\tterms.forEach((term, i) => {\n\t\t\t\t// linux formatting - addr:10.0.2.15\n\t\t\t\tif (RE_LINUX_ADDR.test(term)) {\n\t\t\t\t\taddr.address = term.split(RE_LINUX_ADDR)[1];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// linux formatting - Bcast:10.0.2.255\n\t\t\t\tif (RE_LINUX_BCAST.test(term)) {\n\t\t\t\t\taddr.broadcast = term.split(RE_LINUX_BCAST)[1];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// linux formatting - Mask:255.255.255.0\n\t\t\t\tif (RE_LINUX_MASK.test(term)) {\n\t\t\t\t\taddr.netmask = term.split(RE_LINUX_MASK)[1];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// unix formatting - address is 1st term\n\t\t\t\tif (RE_UNIX_ADDR.test(term)) {\n\t\t\t\t\taddr.address = terms[i + 1];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// unix formatting - netmask 0xffffff00\n\t\t\t\tif (RE_UNIX_MASK.test(term)) {\n\t\t\t\t\tlet netmask = terms[i + 1];\n\n\t\t\t\t\t// convert from hexidecimal if applicable\n\t\t\t\t\tif (/^0x/.test(netmask)) {\n\t\t\t\t\t\t// iterate 2 chars at a time converting from hex to decimal\n\t\t\t\t\t\tfor (let i = CHAR_ADVANCE; i < netmask.length; i += CHAR_ADVANCE) {\n\t\t\t\t\t\t\taddr.netmask = [\n\t\t\t\t\t\t\t\taddr.netmask || '',\n\t\t\t\t\t\t\t\taddr.netmask ? '.' : '',\n\t\t\t\t\t\t\t\tparseInt(\n\t\t\t\t\t\t\t\t\t['0x', netmask.slice(i, i + CHAR_ADVANCE)].join(''),\n\t\t\t\t\t\t\t\t\tBASE_16)].join('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// set netmask in teh event it is not in hexidecimal format\n\t\t\t\t\taddr.netmask = netmask;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// unix formatting - broadcast 10.129.8.255\n\t\t\t\tif (RE_UNIX_BCAST.test(term)) {\n\t\t\t\t\taddr.broadcast = terms[i + 1];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// look for IPv6 info\n\t\tif (RE_IFCONFIG_IPV6.test(line)) {\n\t\t\tdebug('IPv6 information found for interface %s (%s)', iface.name, line);\n\n\t\t\taddr = {};\n\t\t\tiface.ipv6 = (iface.ipv6 || []).concat([addr]);\n\t\t\tterms = line.split(/\\ +/);\n\n\t\t\tterms.some((term, i) => {\n\t\t\t\t// check for linux address reference\n\t\t\t\tif (RE_LINUX_ADDR.test(term)) {\n\t\t\t\t\tterms = terms[i + 1].split(/\\//);\n\t\t\t\t\taddr.address = terms[0];\n\t\t\t\t\taddr.prefixLength = parseInt(terms[1], 10);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (RE_UNIX_IPV6_ADDR.test(term.trim())) {\n\t\t\t\t\taddr.address = terms[i + 1].split(/\\%/)[0];\n\t\t\t\t}\n\n\t\t\t\tif (RE_UNIX_IPV6_PREFIX_LENGTH.test(term)) {\n\t\t\t\t\taddr.prefixLength = parseInt(terms[i + 1], 10);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\t// look for status\n\t\tif (RE_STATUS.test(line)) {\n\t\t\tdebug('status information found for interface %s (%s)', iface.name, line);\n\n\t\t\tterms = line.split(/\\:/g);\n\t\t\tiface.active =\n\t\t\t\tRE_UNIX_STATUS_ACTIVE.test(terms[1]) ||\n\t\t\t\tRE_NUMBER.test(terms[1]);\n\t\t}\n\t});\n\n\t// populate the internal interfaces array\n\thardwareInterfaces.forEach((iface) => {\n\t\tlet include =\n\t\t\t// filter out internal interfaces as applicable\n\t\t\t(networkInfo.options.internal || !iface.internal) &&\n\t\t\t// filter out non-active interfaces as applicable\n\t\t\t(!networkInfo.options.active || iface.active);\n\n\t\tif (include) {\n\t\t\tresult.push(iface);\n\t\t}\n\t});\n\n\t// sort by metric / priority\n\tresult.sort((a, b) => (\n\t\t(a.metric || a.index || DEFAULT_METRIC) - (b.metric || b.index || DEFAULT_METRIC)));\n\n\treturn result;\n}\n\nexport class NetworkInfo {\n\tconstructor (options) {\n\t\tdebug('new NetworkInfo(%o)', options);\n\n\t\tthis._options = options || {};\n\n\t\t_ensureDefaultOptions(this);\n\t}\n\n\tasync applySettings (name, settings) {\n\t\tif (_isNullOrUndefined(name)) {\n\t\t\tthrow new Error('interface name is required');\n\t\t}\n\n\t\tif (_isNullOrUndefined(settings)) {\n\t\t\tthrow new Error('settings are required');\n\t\t}\n\n\t\t// get the interface... if it does not exist, this will result in error\n\t\tlet\n\t\t\tiface = await _ifconfig(this, name),\n\t\t\tresult;\n\n\t\t// check to see if adapter should be enabled / disabled\n\t\tif (!_isNullOrUndefined(settings.active)) {\n\t\t\tdebug(\n\t\t\t\t'attempt %sabling interface %s',\n\t\t\t\tsettings.active ? 'en' : 'dis',\n\t\t\t\tname);\n\n\t\t\tif (settings.active) {\n\t\t\t\tresult = await _ifconfig(this, name, DEFAULT_ACTIVE_UP);\n\t\t\t} else {\n\t\t\t\tresult = await _ifconfig(this, name, DEFAULT_ACTIVE_DOWN);\n\t\t\t}\n\n\t\t\tdebug(\n\t\t\t\t'result of %sabling %s: %o',\n\t\t\t\tsettings.active ? 'en' : 'dis',\n\t\t\t\tname,\n\t\t\t\tresult);\n\t\t}\n\n\t\t// check for hardware address update\n\t\tif (!_isNullOrUndefined(settings.hardwareAddress)) {\n\t\t\tdebug('attempt setting hardware address for interface %s', name);\n\n\t\t\tresult = await _ifconfig(\n\t\t\t\tthis,\n\t\t\t\tname,\n\t\t\t\t'hw',\n\t\t\t\t'ether',\n\t\t\t\tsettings.hardwareAddress);\n\n\t\t\tdebug(\n\t\t\t'result of setting hardware address for interface %s: %o',\n\t\t\tname,\n\t\t\tresult);\n\t\t}\n\n\t\t// check for ipv4 settings updates\n\t\tif (!_isNullOrUndefined(settings.ipv4)) {\n\t\t\tlet\n\t\t\t\taddr = settings.ipv4,\n\t\t\t\targs = [name];\n\n\t\t\t// if an array, select the first object\n\t\t\tif (Array.isArray(addr)) {\n\t\t\t\taddr = addr[0];\n\t\t\t}\n\n\t\t\tif (!_isNullOrUndefined(addr.address)) {\n\t\t\t\tdebug('applying ipv4 hardware address: %s', addr.address);\n\t\t\t\targs.push(addr.address);\n\t\t\t}\n\n\t\t\tif (!_isNullOrUndefined(addr.broadcast)) {\n\t\t\t\tdebug('applying ipv4 hardware broadcast: %s', addr.broadcast);\n\t\t\t\targs.push('broadcast', addr.broadcast);\n\t\t\t}\n\n\t\t\tif (!_isNullOrUndefined(addr.netmask)) {\n\t\t\t\tdebug('applying ipv4 hardware netmask: %s', addr.netmask);\n\t\t\t\targs.push('netmask', addr.netmask);\n\t\t\t}\n\n\t\t\tif (args.length > 1) {\n\t\t\t\tresult = await _ifconfig(this, ...args);\n\n\t\t\t\tdebug(\n\t\t\t\t\t'result of ipv4 settings update to %s: %o',\n\t\t\t\t\tname,\n\t\t\t\t\tresult);\n\t\t\t}\n\t\t}\n\n\t\t// check for MTU update\n\t\tif (!_isNullOrUndefined(settings.mtu)) {\n\t\t\tdebug('attempt setting mtu for interface %s', name);\n\n\t\t\tresult = await _ifconfig(this, name, 'mtu', settings.mtu);\n\n\t\t\tdebug(\n\t\t\t\t'result of setting mtu for interface %s: %o',\n\t\t\t\tname,\n\t\t\t\tresult);\n\t\t}\n\n\t\t// reload interface settings after applying them...\n\t\tiface = await _ifconfig(this, name);\n\n\t\treturn _parseInterfaceInfo(this, iface)[0];\n\t}\n\n\tasync listInterfaces () {\n\t\tlet result = this.options.verbose ?\n\t\t\tawait _ifconfig(this, VERBOSE) :\n\t\t\tawait _ifconfig(this);\n\n\t\treturn _parseInterfaceInfo(this, result);\n\t}\n\n\tget options () {\n\t\treturn this._options;\n\t}\n}\n\nexport default { NetworkInfo };\n"],"file":"index.js"}